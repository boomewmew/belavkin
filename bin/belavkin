#!/usr/bin/env python

# Belavkin: numerical simulation of time evolution of an open quantum system.
# Copyright (C) 2017  Boo Mew Mew

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Numerically simulate time evolution of an open quantum system."""

import numpy as np

def normalize(arr):
    """Normalize an array.
    
    Parameter:
    arr: numpy array to be normalized.
    """
    arr /= np.linalg.norm(arr)
    
N_POSITION_STEPS = 100
N_TIME_STEPS     = 100
POSITION         = np.arange(N_POSITION_STEPS)
HALF_POSITION    = POSITION / 2.0
PAST_BOUNDS      = 0.0
MASS_FACTOR      = complex(imag=0.5 / 1.0)

wave_function = np.empty((N_TIME_STEPS, N_POSITION_STEPS), complex)

wave_function_init = wave_function[0]
wave_function_init.fill(1.0)
normalize(wave_function_init)

for t in range(0, N_TIME_STEPS - 1):
    t_next = t + 1
    
    shifted_left     = np.roll(wave_function[t], -1)
    shifted_left[-1] = PAST_BOUNDS
    shifted_right    = np.roll(wave_function[t], 1)
    shifted_right[0] = PAST_BOUNDS
    
    wave_function[t_next] = wave_function[t] * (
        1.0 + POSITION * (
            np.random.normal(size=N_POSITION_STEPS) - HALF_POSITION
        )
    ) + MASS_FACTOR * (shifted_left - shifted_right)

    normalize(wave_function[t_next])
    
print(wave_function)
